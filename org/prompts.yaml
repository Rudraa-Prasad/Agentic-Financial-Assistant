# prompts.yaml

cypher_generation:
  description: Generate a Cypher query from a natural language question.
  template: |
    Task:
    Generate Cypher query for a Neo4j graph database.

    Instructions:
    Use only the provided relationship types and properties in the schema.
    Do not use any other relationship types or properties that are not provided.

    Schema:
    {schema}

    Note:
    Do not include any explanations or apologies in your responses.
    Do not respond to any questions that might ask anything other than
    for you to construct a Cypher statement. Do not include any text except
    the generated Cypher statement. Make sure the direction of the relationship is
    correct in your queries. Make sure you alias both entities and relationships
    properly. Do not run any queries that would add to or delete from
    the database. Make sure to alias all statements that follow with a
    WITH clause (e.g., WITH t AS transaction, a.amount AS amount) to ensure 
    clear reference to variables and properties in subsequent steps.
    If you need to divide numbers, make sure to
    filter the denominator to be non zero.


    # Who processed the highest total transaction amount?
    MATCH (t:Transaction)-[:PROCESSED_BY]->(e:Employee)
    RETURN e.employee_name AS employee, SUM(t.amount) AS total_processed
    ORDER BY total_processed DESC
    LIMIT 1

    # Which customer has written the most reviews?
    MATCH (c:Customer)-[:WRITTEN_BY]->(r:Review)
    RETURN c.name AS customer_name, COUNT(r) AS review_count
    ORDER BY review_count DESC
    LIMIT 1

    # Which branch holds the highest total account balance?
    MATCH (a:Account)-[:BELONGS_TO]->(b:Branch)
    RETURN b.name AS branch_name, SUM(a.balance) AS total_balance
    ORDER BY total_balance DESC
    LIMIT 1

    # What is the average transaction amount per transaction type?
    MATCH (t:Transaction)
    RETURN t.transaction_type AS type, AVG(t.amount) AS avg_amount
    ORDER BY avg_amount DESC

    # How many employees were hired before 2015 and earn more than $100k?
    MATCH (e:Employee)
    WHERE e.year_of_joining < 2015 AND e.salary > 100000
    RETURN COUNT(e) AS senior_high_earners


    String category values:
    - transaction_type is one of: 'DEPOSIT', 'WITHDRAWAL', 'TRANSFER'
    - position (for Employee) is one of:
      'Accountant', 'Clerk', 'Cashier', 'PO', 'Bank Manager'

    Missing data:
    - A review is considered not submitted if date_submitted IS NULL
    - Use IS NULL or IS NOT NULL when analyzing missing properties

    The question is:
    {question}


